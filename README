

1.

1.1 Image Class:
   - Role: Represents an image and provides methods for reading, processing, and saving images.
   - Connections:
     - Used by the AsciiArtAlgorithm class to obtain the original image for ASCII art generation.
     - Utilized by the HtmlAsciiOutput class for creating HTML representations of images.
   - Throws: IOExceptions

1.2 AsciiOutput Interface:
   - Role: Defines the contract for outputting 2D arrays of characters (ASCII art).
   - Connections:
     - Implemented by ConsoleAsciiOutput and HtmlAsciiOutput classes to specify different output methods.

1.3. ConsoleAsciiOutput Class:
   - Role: Implements the AsciiOutput interface for outputting ASCII art to the console.
   - Connections:
     - Used by the Shell class in the runAsciiArtAlgorithm method to display ASCII art on the console.

1.4. HtmlAsciiOutput Class:
   - Role: Implements the AsciiOutput interface for outputting ASCII art to an HTML file.
   - Connections:
     - Used by the Shell class in the runAsciiArtAlgorithm
     method to generate and save HTML representations of ASCII art.

1.5 SubImgCharMatcher Class:
   - Role: Matches brightness values of sub-images to corresponding ASCII characters.
   - Connections:
     - Utilized by the AsciiArtAlgorithm class and Shell class, to determine the ASCII character for each sub-image.

1.6 Shell Class:
   - Role: Represents the command-line shell for interacting with the ASCII art generation system.
   - Connections:
     - Collaborates with various classes, such as AsciiArtAlgorithm, SubImageCharMatcher,
     ConsoleAsciiOutput, and HtmlAsciiOutput, to execute commands and generate ASCII art.
     - Uses the Image class for image-related operations.
     - Utilizes the SubImgCharMatcher class to associate brightness values with ASCII characters.

1.7 AsciiArtAlgorithm Class:
   - Role: Generates ASCII art from an input image using sub-images and brightness mapping.
   - Connections:
     - Utilizes the Image class to obtain the original image.
     - Collaborates with the SubImgCharMatcher class for
     mapping brightness values to ASCII characters.
     - Interacts with the ConsoleAsciiOutput and HtmlAsciiOutput and ImageOperator
     classes for displaying or saving the generated ASCII art.

1.8 KeyboardInput Class:
   - Role: Represents a utility class for handling keyboard input in the command-line shell.
   - Connections:
     - Used by the Shell class to read user inputs and manage the command-line interface.

Exceptions:

1. AdditionIncorrectFormat:
   - Thrown by the Shell::processInput when the format for adding characters is incorrect.

2. EmptyCharSet:
   - Thrown by the Shell::processInput when attempting to run the ASCII art algorithm with an empty character set.

3. ImageExceptions:
   - Thrown by the Shell::processInput when there is an issue with the image file or during image processing.

4. IncorrectExecuteCommend:
   - Thrown by the Shell::processInput when an unidentified command is encountered during the execution of the shell.

5. IncorrectRemoveChar:
   - Thrown by the Shell::processInput when the format for removing characters is incorrect.

6. MethodIncorrectFormat:
   - Thrown by the Shell::processInput when the format for choosing the output method is incorrect.

7. ResolutionBoundaryException:
   - Thrown by the Shell::processInput when attempting to set a resolution outside the allowed boundaries.

8. WrongFormatResolution:
   - Thrown by the Shell::processInput when the format for changing the resolution is incorrect.

These custom exceptions provide more specific information about the nature of the error,
making it easier to identify and handle issues during the execution of our code.

These classes work together to create a system for generating and displaying
ASCII art from images through a command-line interface. The Shell class serves
as the entry point for user interactions, coordinating the execution of commands
and interactions with other classes. The AsciiArtAlgorithm class performs the
actual ASCII art generation, leveraging the SubImgCharMatcher for character
mapping. Output is managed by classes implementing the AsciiOutput interface,
allowing flexibility in displaying or saving the ASCII art.

2.
SubImgCharMatcher:

We employed two hash maps within the SubImgCharMatcher class to manage brightness values efficiently.
One map is dedicated to pre-stretch brightness values, computed during program setup to achieve an outstanding O(1)
lookup time during ASCII art creation. The second map captures post-stretch brightness values, 
dynamically adjusted as characters are added or removed. This design decision optimizes runtime
performance for ASCII art generation. Additionally, the use of these hash maps contributes to a
space complexity of O(1), as we deal with a constant number of characters (86).

AsciiArtAlgorithm:

In the AsciiArtAlgorithm class, we made a deliberate choice to precalculate brightness values for each
sub-image during instantiation.
This decision, while leading to a linear space complexity of O(n) due to storing brightness values for all sub-images,
significantly improves runtime efficiency when generating ASCII art with various characters.
The trade-off between space and runtime complexities aligns with the goal of enabling dynamic character choices 
without sacrificing performance during art creation.

3.
Exception Handling:

Exception handling in our program is designed to enhance user experience and maintain code clarity.
We introduced custom exception classes, each tailored to specific user input errors.
 All custom exceptions inherit from the RuntimeException base class, 
promoting a unified approach to exception handling. By associating meaningful error messages with each exception,
we ensure informative feedback for users. 
We also catch specific exceptions related to user input errors and IO exceptions thrown by the Image class, 
providing targeted responses to different error scenarios.

4.
SubImgCharMatcher API:

We intentionally maintained the original API of the SubImgCharMatcher class without alterations.
This decision ensures the integrity of the class's interface, promoting compatibility with existing code.
By preserving the API, we contribute to code stability and minimize potential disruptions in other parts of the program.

5.
AsciiArtAlgorithm Modification:

To balance minimal API design with flexibility, we modified the AsciiArtAlgorithm constructor to accept 
a SubImgCharMatcher instance. 
This adjustment empowers the AsciiArtAlgorithm to access and manipulate characters without exposing
an extensive public API. By passing a reference to SubImgCharMatcher,
we enable dynamic character additions and removals in the Shell class without necessitating the creation
of new AsciiArtAlgorithm instances. This design promotes modularity and encapsulation while catering 
to the specific needs of the Shell class.



 
